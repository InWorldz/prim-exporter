// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers
{

using System;
using FlatBuffers;

public struct BabylonFileFlatbuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BabylonFileFlatbuffer GetRootAsBabylonFileFlatbuffer(ByteBuffer _bb) { return GetRootAsBabylonFileFlatbuffer(_bb, new BabylonFileFlatbuffer()); }
  public static BabylonFileFlatbuffer GetRootAsBabylonFileFlatbuffer(ByteBuffer _bb, BabylonFileFlatbuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BabylonFileFlatbuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.MeshInstance? Instances(int j) { int o = __p.__offset(4); return o != 0 ? (InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.MeshInstance?)(new InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.MeshInstance()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InstancesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BabylonFileFlatbuffer> CreateBabylonFileFlatbuffer(FlatBufferBuilder builder,
      VectorOffset instancesOffset = default(VectorOffset)) {
    builder.StartObject(1);
    BabylonFileFlatbuffer.AddInstances(builder, instancesOffset);
    return BabylonFileFlatbuffer.EndBabylonFileFlatbuffer(builder);
  }

  public static void StartBabylonFileFlatbuffer(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddInstances(FlatBufferBuilder builder, VectorOffset instancesOffset) { builder.AddOffset(0, instancesOffset.Value, 0); }
  public static VectorOffset CreateInstancesVector(FlatBufferBuilder builder, Offset<InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.MeshInstance>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartInstancesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BabylonFileFlatbuffer> EndBabylonFileFlatbuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BabylonFileFlatbuffer>(o);
  }
};


}
